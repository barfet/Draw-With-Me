name: Draw With Me CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test-backend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov
      - name: Run unit tests
        run: |
          pytest --cov=app tests/ --cov-report=xml
      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        with:
          name: backend-coverage
          path: backend/coverage.xml

  test-frontend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    steps:
      - uses: actions/checkout@v3
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      - name: Install dependencies
        run: npm ci
      - name: Run tests
        run: npm test
      - name: Build frontend
        run: npm run build
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: frontend-build
          path: frontend/build/

  deploy:
    needs: [test-backend, test-frontend]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      # Set up AWS credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      
      # Download frontend build artifacts
      - name: Download frontend build
        uses: actions/download-artifact@v3
        with:
          name: frontend-build
          path: frontend/build
      
      # Deploy frontend to S3
      - name: Deploy frontend to S3
        run: |
          aws s3 sync frontend/build/ s3://${{ secrets.AWS_S3_BUCKET }} --delete
      
      # Invalidate CloudFront cache
      - name: Invalidate CloudFront Cache
        run: |
          aws cloudfront create-invalidation --distribution-id ${{ secrets.AWS_CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*"
      
      # Package and deploy backend to Lambda
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      
      - name: Install backend dependencies and package
        working-directory: backend
        run: |
          pip install --target ./package -r requirements.txt
          cd package
          zip -r ../lambda_function.zip .
          cd ..
          zip -g lambda_function.zip -r app
          zip -g lambda_function.zip wsgi.py
      
      # Deploy to Lambda
      - name: Deploy to Lambda
        run: |
          aws lambda update-function-code --function-name ${{ secrets.AWS_LAMBDA_FUNCTION_NAME }} --zip-file fileb://backend/lambda_function.zip
      
      # Update Lambda environment variables
      - name: Update Lambda environment variables
        run: |
          aws lambda update-function-configuration --function-name ${{ secrets.AWS_LAMBDA_FUNCTION_NAME }} --environment "Variables={OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}}" 